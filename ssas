import cv2
import tkinter as tk
from PIL import Image, ImageTk
import threading
import time
import ctypes

class VideoStreamApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Live Streams")
        
        self.video_labels = []  # List to store video label widgets
        self.stream_urls = [
            "http://streetcatpull.hellobike.com/live/4489918405732275808_0.m3u8",
        ]
        self.fps = 25  # Frame rate for all streams
        self.stop_event = threading.Event()
        self.threads = []
        
        # Get screen resolution
        user32 = ctypes.windll.user32
        screen_width, screen_height = user32.GetSystemMetrics(0), user32.GetSystemMetrics(1)
        
        # Create video label widgets for each stream
        for i in range(len(self.stream_urls)):
            video_label = tk.Label(self.root)
            video_label.pack(fill=tk.BOTH, expand=True)  # Fill and expand to fit the screen
            video_label.config(width=screen_width, height=screen_height)  # Set label size
            self.video_labels.append(video_label)
        
        # Start threads for streaming each URL
        for i, stream_url in enumerate(self.stream_urls):
            thread = threading.Thread(target=self.video_stream, args=(stream_url, i))
            thread.start()
            self.threads.append(thread)
        
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
    
    def video_stream(self, stream_url, label_index):
        while not self.stop_event.is_set():
            try:
                cap = cv2.VideoCapture(stream_url)

                while True:
                    ret, frame = cap.read()
                    if ret:
                        frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                        frame = Image.fromarray(frame)
                        frame = ImageTk.PhotoImage(image=frame)
                        self.video_labels[label_index].configure(image=frame)
                        self.video_labels[label_index].image = frame
                    if self.stop_event.is_set():
                        break
                    
                    # Introduce delay to match desired frame rate
                    time.sleep(1 / self.fps)

                cap.release()
            except Exception as e:
                print("Error:", e)
    
    def on_closing(self):
        self.stop_event.set()
        self.root.destroy()

if __name__ == "__main__":
    root = tk.Tk()
    app = VideoStreamApp(root)
    root.mainloop()
